Based on the provided project structure, metadata, and the optimized prompt, I will generate a GitHub Actions CI configuration in YAML format for your project. The configuration will include steps for environment setup, quality gates, and other essential aspects outlined in the prompt.


# FILENAME: .github/workflows/ci.yml
name: CI Pipeline
on: [push, pull_request]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ENVIRONMENT SETUP
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # DEPENDENCY CACHING
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

    # LINTING STAGE
    # Assuming maven-checkstyle-plugin is configured in pom.xml
    - name: Run Checkstyle
      run: mvn checkstyle:check
      # QUALITY GATE: Fails on style violations

    # BUILD STAGE
    - name: Build project
      run: mvn clean install
      # QUALITY GATE: Fails on compilation errors

    # TEST STAGE
    - name: Run tests
      run: mvn test
      # QUALITY GATE: Fails on test failures

    # BUILD AND PUSH DOCKER IMAGE
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        push: true
        tags: user/repository:latest



### Notes:

1. **Environment Setup**: This workflow uses Java 11 with the `temurin` distribution as per the Dockerfile. Ensure consistency in Java versions used in CI and Dockerfile.

2. **Dependency Caching**: Maven dependencies are cached to speed up builds by avoiding frequent downloads.

3. **Linting**: The configuration assumes you have `maven-checkstyle-plugin` set up in your `pom.xml`. If not, you can add it to enforce code style.

4. **Build and Test Commands**: Extracted from the metadata, these commands (`mvn clean install` and `mvn test`) handle built stages and run tests, respectively.

5. **Docker**: The Docker step builds your Docker image and pushes it to a registry. Ensure to configure secrets for access tokens if needed.

6. **Quality Gates**: All stages are set to fail if any lint, build, or test steps encounter errors, enforcing quality checks before proceeding.

Make sure this workflow fits into your repository structure by placing the YAML file inside `.github/workflows/`. Adjust the Docker tag and repository details as per your specific setup in Docker Hub or any other container registry you are using.