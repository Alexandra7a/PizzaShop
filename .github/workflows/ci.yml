Based on the given requirements and project details, here's a CI configuration YAML for a GitHub Actions workflow to build, test, and lint a Maven-based Java project with Docker support:


# FILENAME: .github/workflows/ci.yml
name: CI Pipeline

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ENVIRONMENT SETUP
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # DEPENDENCY CACHING
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # LINTING STAGE
    - name: Run Maven Checkstyle
      run: mvn checkstyle:check
      # Ensure the build fails on lint violations

    # BUILD STAGE
    - name: Build project with Maven
      run: mvn clean install
      # Fail build on compilation errors

    # TEST STAGE
    - name: Run tests with Maven
      run: mvn test
      # Fail on test failures
      # Test reports generated by Surefire

    # DOCKER BUILD STAGE
    - name: Build Docker Image
      run: docker build -t pizzashop:latest .

    - name: Validate Dockerfile
      run: docker run --rm pizzashop:latest --version
      # Ensures the Docker image runs correctly

  # CONFIGURATION RULES
  # Timeout is set, caching is applied, and steps fail on errors


### Explanation:
1. **Environment Setup:**
   - The workflow uses the `actions/setup-java` to set up a Java Development Kit version 11, which is specified in the Dockerfile.

2. **Dependency Caching:**
   - Caching for Maven dependencies is set up using `actions/cache`.

3. **Linting Stage:**
   - Executes Maven Checkstyle to ensure code style standards.
   
4. **Build Stage:**
   - Executes `mvn clean install` to build the project and resolve dependencies.

5. **Test Stage:**
   - Runs the test suite using `mvn test`. This step ensures test coverage and reports test results.

6. **Docker Build Stage:**
   - The workflow includes commands to build a Docker image and validate it by running the built image.

This CI setup supports quality gates by ensuring that linting, testing, and Docker packaging are correctly validated before any code is considered ready to be merged. The pipeline is configured in accordance with best practices such as caching dependencies and failing fast on errors.