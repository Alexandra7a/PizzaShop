Based on the information provided, here is a CI configuration for the given project using GitHub Actions in YAML format. This configuration is tailored to your Java project structured around Maven, with emphasis on quality gates and Docker integration.


# FILENAME: .github/workflows/ci.yml
name: CI Pipeline
on: [push, pull_request]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ENVIRONMENT SETUP
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # DEPENDENCY CACHING
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # LINTING STAGE (Maven Enforcer Plugin can be used for basic lint-like checks)
    - name: Run Maven Enforcer
      run: mvn enforcer:enforce
      # QUALITY GATE: Fails on Maven configuration violations

    # BUILD STAGE
    - name: Build Project
      run: mvn clean install
      # QUALITY GATE: Fails on build errors

    # TEST STAGE
    - name: Run Tests
      run: mvn test
      # QUALITY GATE: Fails on test failures

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test-lint  # Ensure this job runs only if build-test-lint succeeds

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # SETUP DOCKER
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # BUILD DOCKER IMAGE
    - name: Build Docker Image
      run: docker build -t my-dockerhub-account/pizzashop:latest .

    # PUSH DOCKER IMAGE
    - name: Push Docker Image
      run: docker push my-dockerhub-account/pizzashop:latest

    # OPTIONAL: DEPLOYMENT STEP
    # Add deployment steps here if necessary, depending on your specific deployment strategy and environment variables setup


### Key Considerations:
- **Environment Setup**: Java 11 is specified because your Dockerfile and pom.xml suggest compatibility with OpenJDK 11.
- **Dependency Caching**: Caches Maven dependencies for faster builds.
- **Linting Stage**: Uses Maven Enforcer to ensure certain project standards. You might need to configure an actual linter based on further requirements or use custom plugins.
- **Build and Test Stages**: Executed using Maven commands that match your project's setup.
- **Docker Integration**: Builds and pushes Docker images based on your Dockerfile.
- **Secret Management**: It assumes that Docker Hub credentials are stored in GitHub Secrets as `DOCKERHUB_USERNAME` and `DOCKERHUB_TOKEN`.
- **Timeout Protection**: All jobs have a set timeout to prevent hanging indefinitely.

Ensure the placeholders like `my-dockerhub-account` are replaced with actual values relevant to your setup. Adjust the configuration further based on any specific CI/CD needs or tools you might be using (Jenkins considerations were mentioned but defaulted to GitHub Actions).